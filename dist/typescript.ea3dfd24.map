{"version":3,"sources":["index.ts"],"names":["isOpen","myName","myAge","list","me","Job","job","WebDev","phone","tablet","sayWord","word","otherStuff","_i","arguments","length","console","log","newName","newNameTwo","makeMargin","x","dog","undefined","sayName","_a","name","age"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,SAAS,KAAb;AACA,IAAIC,SAAS,OAAb;AACA,IAAIC,QAAQ,KAAZ;AACA,IAAIC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX;AACA,IAAIC,KAAK,CAAC,MAAD,EAAS,EAAT,EAAa,KAAb,CAAT;AACA,IAAIC,GAAJ;AACA,CAAC,UAAUA,GAAV,EAAe;AACZA,QAAIA,IAAI,QAAJ,IAAgB,CAApB,IAAyB,QAAzB;AACAA,QAAIA,IAAI,aAAJ,IAAqB,CAAzB,IAA8B,aAA9B;AACAA,QAAIA,IAAI,IAAJ,IAAY,CAAhB,IAAqB,IAArB;AACH,CAJD,EAIGA,QAAQA,MAAM,EAAd,CAJH;AAKA,IAAIC,MAAMD,IAAIE,MAAd;AACA,IAAIC,QAAQ,OAAZ;AACA,IAAIC,SAAS,CAAb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,SAAVA,OAAU,CAAUC,IAAV,EAAgB;AAC1B,QAAIA,SAAS,KAAK,CAAlB,EAAqB;AAAEA,eAAO,OAAP;AAAiB;AACxC,QAAIC,aAAa,EAAjB;AACA,SAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKC,UAAUC,MAAhC,EAAwCF,IAAxC,EAA8C;AAC1CD,mBAAWC,KAAK,CAAhB,IAAqBC,UAAUD,EAAV,CAArB;AACH;AACDG,YAAQC,GAAR,CAAYL,UAAZ;AACAI,YAAQC,GAAR,CAAYN,IAAZ;AACA,WAAOA,IAAP;AACH,CATD;AAUAD,QAAQ,OAAR,EAAiB,KAAjB;AACA;AACA,IAAIQ,UAAU,OAAd;AACA;AACA;AACAA,UAAU,KAAV;AACA,IAAIC,aAAaD,OAAjB;AACA;AACA;AACA,IAAIE,aAAa,SAAbA,UAAa,CAAUC,CAAV,EAAa;AAC1B,WAAO,aAAaA,CAAb,GAAiB,KAAxB;AACH,CAFD;AAGAD,WAAW,EAAX;AACAA,WAAW,IAAX;AACA;AACA,IAAIE,MAAM,OAAV;AACAA,MAAM,IAAN;AACAA,MAAM,OAAN;AACAA,MAAMC,SAAN;AACA,IAAIC,UAAU,SAAVA,OAAU,CAAUC,EAAV,EAAc;AACxB,QAAIC,OAAOD,GAAGC,IAAd;AAAA,QAAoBC,MAAMF,GAAGE,GAA7B;AACAX,YAAQC,GAAR,CAAYS,IAAZ;AACA,WAAOA,IAAP;AACH,CAJD;AAKAF,QAAQ;AACJE,UAAM,OADF;AAEJC,SAAK;AAFD,CAAR;AAIAH,QAAQ;AACJG,SAAK,EADD;AAEJD,UAAM;AAFF,CAAR;AAIA","file":"typescript.ea3dfd24.map","sourceRoot":"..","sourcesContent":["var isOpen = false;\nvar myName = 'Scott';\nvar myAge = 32.04;\nvar list = [0, 1, 2];\nvar me = ['Scot', 32, false];\nvar Job;\n(function (Job) {\n    Job[Job[\"WebDev\"] = 0] = \"WebDev\";\n    Job[Job[\"WebDesigner\"] = 1] = \"WebDesigner\";\n    Job[Job[\"PM\"] = 2] = \"PM\";\n})(Job || (Job = {}));\nvar job = Job.WebDev;\nvar phone = 'Pixel';\nvar tablet = 3;\n// Functions in TypeScript\n//  ? for optional params\n// const sayWord = (word?: string): string => {\n//   console.log(word || 'Hello');\n//   return word || 'Hello';\n// };\n// sayWord();\n// Default Params\n// need not state types in parameters to run\n// Rest params work as expected\nvar sayWord = function (word) {\n    if (word === void 0) { word = 'Hello'; }\n    var otherStuff = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        otherStuff[_i - 1] = arguments[_i];\n    }\n    console.log(otherStuff);\n    console.log(word);\n    return word;\n};\nsayWord('Scott', 'Wes');\n// Implicit Types in TS\nvar newName = 'Scott';\n// newName = 'Wes';\n// newName = 10;\nnewName = false;\nvar newNameTwo = newName;\n// newNameTwo = 10;\n// Union Types with |\nvar makeMargin = function (x) {\n    return \"margin: \" + x + \"px;\";\n};\nmakeMargin(10);\nmakeMargin('10');\n// Null Types\nvar dog = 'Sammy';\ndog = null;\ndog = 'Lucie';\ndog = undefined;\nvar sayName = function (_a) {\n    var name = _a.name, age = _a.age;\n    console.log(name);\n    return name;\n};\nsayName({\n    name: 'Scott',\n    age: 32,\n});\nsayName({\n    age: 32,\n    name: 'Scott',\n});\n// sayName(32, 'Scott');\n"]}